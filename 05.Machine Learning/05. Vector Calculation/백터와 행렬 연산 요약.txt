백터와 행렬 연산 요약

백터와 행렬 연산이 왜 중요한가?
- 전에는 독립변수 x가 2개 이상인 선형회귀와 로지스틱회기를 했었다면...
- 이제는 종속 변수 y의 종류도 3개 이상되면서 복잡해짐
- 이를 해결하기위해 Numpy나 텐서플로우의 로우레벨(Low-Level)를 사용하여 벡터와 행렬연산이 필요하게됨

벡터와 행렬과 텐서
- 백터는 크기와 방향을 가진 양
-> 파이썬에서는 1차원 배열 또는 리스트로 표현
-행렬은 행과 열을 가지는 2차원 형상을 가진 구조
-> 파이썬에서는 2차원 배열로 표현
-> 가로줄은 행(Row), 세로줄은 렬(Column)
- 3차원부터는 주로 텐서라고 부름
-> 파이썬에서는 3차원 배열로 표현

텐서(Tensor)란?
- 3차원이 단순히 3차원 배열이 아니라
- d = np.array([
            [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [10, 11, 12, 13, 14]],
            [[15, 16, 17, 18, 19], [19, 20, 21, 22, 23], [23, 24, 25, 26, 27]]
            ])
-> 이런식으로 shape이 (2,3,5)인 거였음
- 0차원 ~ 2차원 텐서는 각각 스칼라, 벡터, 행렬
- 3차원 이상의 텐서부터 본격적으로 텐서라고 부름
- 3차원 텐서를 배열로 합치면 4차원
-> 마찬가지로, 4차원 텐서를 배열로 합치면 5차원 텐서가 만들어짐
-> 계속 다차원 배열로 확장 가능!
- keras에서는 input_shape으로 지정 가능

백터와 행렬의 덧셈 뺄셈
- 같은 크기의 두개의 벡터나 행렬에 대한 덧샘 뺄샘 가능
- 같은 위치의 원소끼리 연산함(요소별 연산 - Element-wise)

백터의 내적과 행렬의 곱셈
- 점곱(dot product) 혹은 내적(inner product)
- 벡터의 내적은 연산을 점(dot)으로 표현하여 a(가운데점)b와 같이 표현

내적이 성립하기 위해서는...
- 백터의 경우
-> 두 벡터의 차원이 같아야하고
-> 두 벡터 중 앞의 벡터가 행벡터(가로방향), 뒤의 벡터가 열벡터(세로방향)여야 함
-> 벡터의 내적의 결과는 스칼라가 됨

- 행렬의 경우
-> 왼쪽 행렬의 행벡터(가로방향), 오른쪽 행렬의 열벡터(세로방향)의 크기가 같아야함
-> A X B 이 성립되기 위해서 행렬 A의 열의 개수와 행렬 B의 행의 개수가 같아야함(가중치 행렬의 크기)
-> A X B 의 결과로 나온 행렬 AB의 크기는 A의 행의 개수와 B의 열의 개수(편향 행렬의 크기)

다중 선형 회귀 행렬 연산으로 이해하기
- 독립변수가 2개 이상일때, 1개의 종속 변수를 예측하는 문제를 어떻게 표현하나?
- 식이 아래처럼 있을텐데...
-> y = w1x1 + w2xw + ... wnxn + b
- 이는 입력 벡터[x1,x2...xn]와 가중치 벡터[w1,w2...wn]의 내적으로 표현 가능
- 또는 순서만 바뀌어서 가중치 벡터와 입력벡터의 내적으로 표현 가능
- 이를 표현하면 H(X) = WX + B
- 인공신경망 또한 본질적으로는 위와 같은 형렬의 연산

샘플(Sample)과 특성(Feature)
- 훈련 데이터의 입력 행렬을 X라고 할 때
-> 각 열을 Feature-1,2,3
-> 각 행을 Sample-1,2,3

가중치와 편향 행렬의 크기 결정
- 입력과 출력의 행렬의 크기로부터 가중치 행렬 W와 편향 행렬 B의 크기를 찾아 낼 수 있음
- 예를 들면
- X(mxn) x W(?x?) + B(?x?) = Y(mxj) - 괄호 안에는 행렬의 크기라면
-> B는 출력행렬과 크기가 같아야함으로, B(mxj)
-> 행렬의 덧셈에 해당되는 B행렬은 Y행렬의 크기에 영향 X
-> B행렬의 크기 == Y행렬의 크기

- X(mxn) x W(?x?) + B(mxj) = Y(mxj)
-> 행렬의 곱셈이 성립되야함으로  X의 열 == W의 행
-> 앞의 ? == n

- X(mxn) x W(nx?) + B(mxj) = Y(mxj)
-> 출력행렬 Y의 열의 크기는 W 행렬의 열의 크기와 동일 
-> ? == j
- X(mxn) x W(nxj) + B(mxj) = Y(mxj)

- 결과적으로, 입력 행렬과 출력 행렬의 크기로부터 가중치 행렬과 편향 행렬의 크기를 추정 가능