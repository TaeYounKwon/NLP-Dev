코사인 유사도(Cosine Similiarity) 요약


먼저 벡터의 유사도(Vector Similarity)
- 단어를 수치화 할 수 있는 방법을 이해했다면...
- 수치화된 표현 방법에 대해 코사인 유사도를 사용하여 문서의 유사도를 구하는게 가능함!

코사인 유사도란?
- 두 벡터 간의 코사인 각도를 이용하여 구할 수 있는 두 벡터의 유사도.
- 두 벡터의 방향이 완전히 동일한 경우에는 1
- 두 벡터의 방향이 90도의 각을 이루면 0
- 두 벡터의 방향이 180도의 각을 이루면 -1
- 값이 1에 가까울수록 유사도가 높다고 판단 가능

어떻게 사용되는가?
-예)
문서1 : 저는 사과 좋아요
문서2 : 저는 바나나 좋아요
문서3 : 저는 바나나 좋아요 저는 바나나 좋아요

- 전처리시)
문서1: 0,1,1,1
문서2: 1,0,1,1
문서2: 2,0,2,2

-이제 이걸 코사인 유사도 함수에 넣어 계산하면
문서 1과 문서2의 유사도 : 0.67
문서 1과 문서3의 유사도 : 0.67
문서 2과 문서3의 유사도 : 1.00

- 2와 3에서 유사도가 1이 나왔는데 이는 두 문장을 수치화 시킨 값으 벡터 방향이 동일하다는 뜻
-> 한 문서 내의 모든 단어의 빈도수가 동일하게 증가하는 경우에는
--> 기존의 문서와 코사인 유사도의 값이 '1'

이게 어떤 말이냐면...
- 문서 A와 B가 동일한 주제, C는 다른 주제의 문서, A문서와 C문서의 길이는 비슷, B문서는 A문서의 2배정도 양
- 이걸 유클리드 거리로 유사도를 연산하면 동일한 주제인 A와 B의 유사도가 높게 나오는게 아닌,
-> 문장의 길이가 비슷한 A와 C가 비슷하게 나오게됨
-> 이는, 유클리드 거리의 연산이 문서의 길이에 영향을 받았기 때문에
- 이럴때 코사인 유사도를 쓴다면?
-> A와 C의 유사도가 더 높게 잘 나오는 것을 확인 가능
-> 이는 코사인 유사도는 벡터의 방향(패턴)에 초점을 두기 때문에
-> 문서의 길이가 서로 다른 상황에서도 비교적 공정한 비교를 할 수 있도록 도와줌
 