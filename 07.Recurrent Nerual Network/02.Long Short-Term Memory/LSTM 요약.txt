장단기 메모리(Long Short-Term Memory, LSTM)이란?

바닐라 RNN의 한계
- 앞서 배운 RNN을 가장 단순한 형태의 RNN = Vanilla RNN라고 함
- 바닐라 RNN은 출력 결과가 이전의 계산 결과에 의존
- 다만 바닐라 RNN은 비교적 짧은 시퀀스에 대해서만 효과를 보임
-> 즉, RNN의 시점이 길어질 수록 앞의 정보가 뒤로 충분히 전달되지 못함
-> 예로, 나 싱가폴인데 여기 비빔밥이랑 막국수가 아주 맛있어. 나는 지금 ___에 있어
--> 이러면 RNN이 충분한 기억력을 가지고 있지 못해 예측을 잘 못함
- 이를 장기 의존성 문제(The Problem of Long-Term Dependencies)

LSTM은 뭐가 다르지?
- LSTM은 은닉층의 메모리 셀에 입력, 망각, 출력게이트를 추가함
-> 이를 통해 불필요한 기억을 지우고, 기억해야할 것들을 정함
-> 요약하면 LSTM은 은닉 상태를 계싼하는 식이 더 복잡해졌으며 셀 상태(Cell State)라는 값이 추가됨

셀 상태란?
- 은닉 상태처럼 이전 시점의 셀 상태가 다음 시점의 셀 상태를 구하기 위한 입력으로 사용됨
- 은닉 상태의 값과 셀 상태의 값을 구하기 위해 위에 언급한 3개의 게이트가 사용됨
- 3개의 게이트 모두 공통적으로 시그모이드 함수가 존재
- 시그모이드 함수를 지나면 0과 1사이의 값이 나오는데, 이 값들을 가지고 게이트를 조절

3가지 게이트를 사용하는 방법
1. 입력 게이트
- 현재 정보를 기억하기 위한 게이트
- it = 
-> 현재 시점 t의 x값과 입력 게이트로 이어지는 가중치를 곱한 값
-> +이전 시점 t-1의 은닉 상태가 입력 게이트로 이어지는 가중치를 곱한 값을 더하여 시그모이드 함수를 지남
- gt = 
-> 현재 시점 t의 x값과 입력 게이트로 이어지는 가중치를 곱한 값
-> +이전 시점 t-1의 은닉 상태가 입력 게이트로 이어지는 가중치를 곱한 값을 더하여 하이퍼볼릭탄젠트 함수를 지남
- 결과적으로 시그모이드 함수를 지나 0과 1사이의 값을 가지는 it와
- 하이퍼볼릭탄젠트 함수를 지나 -1과 1사이의 값을 가지는 gt
- 두개의 값을 가지고 이번에 선택된 기억할 정보의 양을 정함
- 얼마큼 어떻게 정하는지는 다음 삭제 게이트를 확인!

2. 삭제 게이트
- 기억을 삭제하기 위한 게이트
- 현재 시점 t의 x값과 이전 시점 t-1의 은닉 상태가 시그모이드 함수를 지나게 됨
- 시그모이드 함수를 지나면 0과1사이의 값이 나오게 되는데, 이 값이 곧 삭제 과정을 거친 정보의 양
- 0에 가까울수록 정보가 많이 삭제
- 1에 가까울수록 정보를 온전히 기억
- 이를 가지고 셀 상태를 구하게됨!
- 아래 셀 상태 수식 확인

3. 셀 상태
- 삭제 게이트에서 일부 기억을 잃은 상태
- 먼저 같은 크기의 두 행렬이 있을 때 같은 위치의 성분끼리 곱을 진행
- 입력 게이트에서 선택된 기억을 삭제 게이트의 결과값과 더함
- 이 값을 현재 시점 t의 셀 상태, 이 값은 다음 t+1 시점의 LSTM셀로 넘겨짐
- 삭제 게이트는 이전 시점의 입력을 얼마나 반영할지를 의미
-> 삭제 게이트가 0이면 현재 시점의 입력값만 사용하게 됨
- 입력 게이트는 현재 시점의 입력을 얼마나 반영할지를 결정
-> 입력 게이트가 0이면 이전 시점의 셀 상태의 값에만 의존

4. 출력 게이트와 은닉 상태
- 현재 시점 t의 x값과 이전 시점 t-1의 은닉 상태가 시그모이드 함수를 지난 값
- 현재 시점 t의 은닉 상태를 결정하는 일에 쓰임
- 셀 상태의 값이 tanh함수를 지나 -1~1사이의 값이 되고, 출력 게이트의 값과 연산되면서 값이 걸러지는 효과가 발생
-> 은닉 상태가 됨
- 은닉 상태의 값 또한 출력층으로 이동